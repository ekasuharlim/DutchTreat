
Startup class is called in main entry point program.cs
Startup.Configure is HttpRequest pipeline

Setup static files :
app.UseStaticFiles()
Static files must be inside wwwroot

Default static files :
app.UseDefaultFiles()
	Search the file inside wwwroot
	Change the internal path to point to the file
	return the changed internal path

Enable MVC :
	Services.AddControllersWithViews()
	app.UseRouting();
	app.UseEndpoints(Action<IEndPpointBuilder>);

How UseEndPoints works :
	Understanding ASP.NET Core Endpoint Routing : https://aregcode.com/blog/2019/dotnetcore-understanding-aspnet-endpoint-routing/
	How ASP. Net core endpoint routing works : https://developpaper.com/how-asp-net-core-endpoint-routing-works/
	EndpointRoutingApplicationBuilderExtensions -> extension class that has UseRouting and UseEndpoints method
	ControllerEndpointRouteBuilderExtensions -> extension class contains MapControllerRoute  and  other methods for using Controllers 
	UseRouting : to match pattern with url
		UseRouting will call EndpointRoutingMiddleware -> responsible for matching url with pattern specified in UseEndPoints
			EndpointRoutingMiddleware will call Matcher (eg: BareboneMatcher) to set matched EndPoint to HttpContext in method MatchAsync

	UseEndPoints : endpoint mapping and dispatch endpoint
				   mapping defined here also can be accessed in UseRouting when request comes (MapControllerRoute)	
						MapControllerRoute will add ConventionalRouteEntry to the route datasource
										   will add ControllerActionEndpointDataSource to datasource, has method CreateEndpoints, 
										   CreateEndpoints in the end it will create Endpoint.RequestDelegate
				   will call EndpointMiddleware for dispatching (await endpoint.RequestDelegate)
					
More views:
	Special file :
		Shared/_Layout.cshtml  -> master page contains header and footer
		_ViewStart.cshtml -> put reference to Lasyout file, will  be applied to all views
		_ViewImport.cshtml -> put included binaries in all cshtml file, can be use to include taghelper

ModelViewBinding:
	Create the model
	Add reference to  the model on the view html

Validation:
	To add validation : add reference to System.ComponentModel.DataAnnotations
	ClientSide validation will need Jquery.Validate and Jquery.Validate.Unobtrusive
	Jquery.Validate.Unobtrusive -> is a microsoft Jquery Validate extension

Services:
	Defined in startup.cs
	Add dependency Injection in Startup.cs
		https://stackoverflow.com/questions/38138100/addtransient-addscoped-and-addsingleton-services-differences
		AddTransient: will be created as requested
		AddScoped : a request lifetime

EntityFramework:
	Create DbContext
		Configure connection string in onConfiguring override
		Add DbSet -> entities to query
		Seeder created inside main as optional action
		DbContext registered in DI use in Repository class
		Repository registered in DI 
		Controller use repository


Create API:
	Getting data
		why need to use ActionResult<IEnumerable<Product>> ?
			for documentation tools
	Post Data:
		use viewmodel
		validation can be added to viewmodel
		use automapper to map viewmodel to entity
			accessible by DI
			Profile Class in automapper will need to be inherit to define mapping
				CreateMap by default will use the property name
			Can be used to flatning entity in view model 
	Create OrderItems with order url
	Use QueryString to add some parameters to the url
	
Using Identity, with entity framework
	Create model
	Create identity dbContext	
	services.AddIdentity<StoreUser, IdentityRole>().AddEntityFrameworkStores<DutchContext>() -> will add -> IUserStore

Identity for API
	Add JwtBearer in DI <- Use token 
	[Authorize(Authentication = xxx)] To differentiate the authentication in authentication
	CreateToken method will create :
		- token -> need -> claim and signincredential 
		        -> need -> tokenKey <- specify also in startup
		- retun token with handler
	JwtToken:
		Header
		Payload -> claims
		Signature -> (secret + payload) encrypted
	CreateToken -> jwtToken -> base64 -> decode -> compare signature with key -> if ok then authenticated
	Token vs Session Auth 
	Distributed vs Centralize
	Stateless vs Stateful

	https://www.webskeleton.com/webdev/2019/10/22/JWT-Primer-and-Should-You-Use-It.html

Angular
	Debuging: old method : console.log and display to screen with object | json
	Typescript -> compiled (ng build)-> Javascript 
	angular.json -> Option to build angular to wwwroot folder 
	tsconfig.json -> ts compile options
	Need at least 1 module -> has 1 main component -> bootstrap setting
	include the js file
	Component :
		selector -> match with div in html file
		templateUrl -> view (html)
		styles -> css file
	Component -> use -> services (data)

	add checkout
		routing
	add login
		form binding
	checkout clicked
		call service for saving order

deployment:
	gulp
	how to use gulp result in asp.net core?
	
	